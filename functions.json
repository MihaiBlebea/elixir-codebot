[[{"a":"#all/0","name":"all()"},{"a":"#at/1","name":"at(index)"},{"a":"#at!/1","name":"at!(index)at/1Enum.OutOfBoundsError"},{"a":"#elem/1","name":"elem(index)"},{"a":"#fetch/2","name":"fetch(container, key)Access"},{"a":"#fetch!/2","name":"fetch!(container, key)fetch/2KeyError"},{"a":"#filter/1","name":"filter(func)"},{"a":"#get/3","name":"get(container, key, default \\\\ nil)Access"},{"a":"#get_and_update/3","name":"get_and_update(container, key, fun)Access"},{"a":"#key/2","name":"key(key, default \\\\ nil)"},{"a":"#key!/1","name":"key!(key)"},{"a":"#pop/2","name":"pop(container, key)Access"}],[{"a":"#cast/2","name":"cast(agent, fun)"},{"a":"#cast/4","name":"cast(agent, module, fun, args)"},{"a":"#child_spec/1","name":"child_spec(arg)"},{"a":"#get/3","name":"get(agent, fun, timeout \\\\ 5000)"},{"a":"#get/5","name":"get(agent, module, fun, args, timeout \\\\ 5000)"},{"a":"#get_and_update/3","name":"get_and_update(agent, fun, timeout \\\\ 5000)"},{"a":"#get_and_update/5","name":"get_and_update(agent, module, fun, args, timeout \\\\ 5000)"},{"a":"#start/2","name":"start(fun, options \\\\ [])"},{"a":"#start/4","name":"start(module, fun, args, options \\\\ [])"},{"a":"#start_link/2","name":"start_link(fun, options \\\\ [])"},{"a":"#start_link/4","name":"start_link(module, fun, args, options \\\\ [])"},{"a":"#stop/3","name":"stop(agent, reason \\\\ :normal, timeout \\\\ :infinity)"},{"a":"#update/3","name":"update(agent, fun, timeout \\\\ 5000)"},{"a":"#update/5","name":"update(agent, module, fun, args, timeout \\\\ 5000)"}],[{"a":"#app_dir/1","name":"app_dir(app)"},{"a":"#app_dir/2","name":"app_dir(app, path)app_dir/1"},{"a":"#compile_env/3","name":"compile_env(app, key_or_path, default \\\\ nil)"},{"a":"#compile_env!/2","name":"compile_env!(app, key_or_path)"},{"a":"#delete_env/3","name":"delete_env(app, key, opts \\\\ [])"},{"a":"#ensure_all_started/2","name":"ensure_all_started(app, type \\\\ :temporary)"},{"a":"#ensure_loaded/1","name":"ensure_loaded(app)"},{"a":"#ensure_started/2","name":"ensure_started(app, type \\\\ :temporary)"},{"a":"#fetch_env/2","name":"fetch_env(app, key)"},{"a":"#fetch_env!/2","name":"fetch_env!(app, key)"},{"a":"#format_error/1","name":"format_error(reason)start/2ensure_started/2stop/1load/1unload/1"},{"a":"#get_all_env/1","name":"get_all_env(app)"},{"a":"#get_application/1","name":"get_application(module)"},{"a":"#get_env/3","name":"get_env(app, key, default \\\\ nil)"},{"a":"#load/1","name":"load(app)"},{"a":"#loaded_applications/0","name":"loaded_applications()"},{"a":"#put_all_env/2","name":"put_all_env(config, opts \\\\ [])"},{"a":"#put_env/4","name":"put_env(app, key, value, opts \\\\ [])"},{"a":"#spec/1","name":"spec(app)"},{"a":"#spec/2","name":"spec(app, key)"},{"a":"#start/2","name":"start(app, type \\\\ :temporary)"},{"a":"#started_applications/1","name":"started_applications(timeout \\\\ 5000)"},{"a":"#stop/1","name":"stop(app)"},{"a":"#unload/1","name":"unload(app)"}],[],[],[{"a":"#to_charlist/1","name":"to_charlist(atom)"},{"a":"#to_string/1","name":"to_string(atom)"}],[],[],[],[],[],[{"a":"#decode16/2","name":"decode16(string, opts \\\\ [])"},{"a":"#decode16!/2","name":"decode16!(string, opts \\\\ [])"},{"a":"#decode32/2","name":"decode32(string, opts \\\\ [])"},{"a":"#decode32!/2","name":"decode32!(string, opts \\\\ [])"},{"a":"#decode64/2","name":"decode64(string, opts \\\\ [])"},{"a":"#decode64!/2","name":"decode64!(string, opts \\\\ [])"},{"a":"#encode16/2","name":"encode16(data, opts \\\\ [])"},{"a":"#encode32/2","name":"encode32(data, opts \\\\ [])"},{"a":"#encode64/2","name":"encode64(data, opts \\\\ [])"},{"a":"#hex_decode32/2","name":"hex_decode32(string, opts \\\\ [])"},{"a":"#hex_decode32!/2","name":"hex_decode32!(string, opts \\\\ [])"},{"a":"#hex_encode32/2","name":"hex_encode32(data, opts \\\\ [])"},{"a":"#url_decode64/2","name":"url_decode64(string, opts \\\\ [])"},{"a":"#url_decode64!/2","name":"url_decode64!(string, opts \\\\ [])"},{"a":"#url_encode64/2","name":"url_encode64(data, opts \\\\ [])"}],[{"a":"#defcallback/1","name":"defcallback(spec)"},{"a":"#defmacrocallback/1","name":"defmacrocallback(spec)"}],[],[{"a":"#compatible_calendars?/2","name":"compatible_calendars?(calendar, calendar)"},{"a":"#get_time_zone_database/0","name":"get_time_zone_database()"},{"a":"#put_time_zone_database/1","name":"put_time_zone_database(database)"},{"a":"#strftime/3","name":"strftime(date_or_time_or_datetime, string_format, user_options \\\\ [])"},{"a":"#truncate/2","name":"truncate(microsecond_tuple, atom)"}],[{"a":"#date_to_string/4","name":"date_to_string(year, month, day, format \\\\ :extended)"},{"a":"#datetime_to_string/12","name":"datetime_to_string(year, month, day, hour, minute, second, microsecond, time_zone, zone_abbr, utc_offset, std_offset, format \\\\ :extended)"},{"a":"#day_of_era/3","name":"day_of_era(year, month, day)"},{"a":"#day_of_week/4","name":"day_of_week(year, month, day, starting_on)"},{"a":"#day_of_year/3","name":"day_of_year(year, month, day)"},{"a":"#day_rollover_relative_to_midnight_utc/0","name":"day_rollover_relative_to_midnight_utc()Calendar.day_rollover_relative_to_midnight_utc/0"},{"a":"#days_in_month/2","name":"days_in_month(year, month)"},{"a":"#leap_year?/1","name":"leap_year?(year)"},{"a":"#months_in_year/1","name":"months_in_year(year)"},{"a":"#naive_datetime_from_iso_days/1","name":"naive_datetime_from_iso_days(arg)Calendar.iso_days/0"},{"a":"#naive_datetime_to_iso_days/7","name":"naive_datetime_to_iso_days(year, month, day, hour, minute, second, microsecond)Calendar.iso_days/0"},{"a":"#naive_datetime_to_string/8","name":"naive_datetime_to_string(year, month, day, hour, minute, second, microsecond, format \\\\ :extended)"},{"a":"#parse_date/1","name":"parse_date(string)"},{"a":"#parse_naive_datetime/1","name":"parse_naive_datetime(string)"},{"a":"#parse_time/1","name":"parse_time(string)"},{"a":"#parse_utc_datetime/1","name":"parse_utc_datetime(string)"},{"a":"#quarter_of_year/3","name":"quarter_of_year(year, month, day)"},{"a":"#time_from_day_fraction/1","name":"time_from_day_fraction(arg)"},{"a":"#time_to_day_fraction/4","name":"time_to_day_fraction(hour, minute, second, arg)"},{"a":"#time_to_string/5","name":"time_to_string(hour, minute, second, microsecond, format \\\\ :extended)"},{"a":"#valid_date?/3","name":"valid_date?(year, month, day)"},{"a":"#valid_time?/4","name":"valid_time?(hour, minute, second, microsecond)"},{"a":"#year_of_era/1","name":"year_of_era(year)"}],[],[],[],[{"a":"#append_path/1","name":"append_path(path)"},{"a":"#available_compiler_options/0","name":"available_compiler_options()"},{"a":"#can_await_module_compilation?/0","name":"can_await_module_compilation?()"},{"a":"#compile_file/2","name":"compile_file(file, relative_to \\\\ nil)"},{"a":"#compile_quoted/2","name":"compile_quoted(quoted, file \\\\ \"nofile\")"},{"a":"#compile_string/2","name":"compile_string(string, file \\\\ \"nofile\")"},{"a":"#compiler_options/0","name":"compiler_options()"},{"a":"#compiler_options/1","name":"compiler_options(opts)"},{"a":"#delete_path/1","name":"delete_path(path)"},{"a":"#ensure_compiled/1","name":"ensure_compiled(module)"},{"a":"#ensure_loaded/1","name":"ensure_loaded(module)"},{"a":"#ensure_loaded?/1","name":"ensure_loaded?(module)"},{"a":"#eval_file/2","name":"eval_file(file, relative_to \\\\ nil)"},{"a":"#eval_quoted/3","name":"eval_quoted(quoted, binding \\\\ [], opts \\\\ [])"},{"a":"#eval_string/3","name":"eval_string(string, binding \\\\ [], opts \\\\ [])"},{"a":"#fetch_docs/1","name":"fetch_docs(module_or_path)"},{"a":"#format_file!/2","name":"format_file!(file, opts \\\\ [])"},{"a":"#format_string!/2","name":"format_string!(string, opts \\\\ [])"},{"a":"#get_compiler_option/1","name":"get_compiler_option(key)"},{"a":"#get_docs/2","name":"get_docs(module, kind)"},{"a":"#prepend_path/1","name":"prepend_path(path)"},{"a":"#purge_compiler_modules/0","name":"purge_compiler_modules()"},{"a":"#put_compiler_option/2","name":"put_compiler_option(key, value)"},{"a":"#require_file/2","name":"require_file(file, relative_to \\\\ nil)"},{"a":"#required_files/0","name":"required_files()"},{"a":"#string_to_quoted/2","name":"string_to_quoted(string, opts \\\\ [])"},{"a":"#string_to_quoted!/2","name":"string_to_quoted!(string, opts \\\\ [])"},{"a":"#unrequire_files/1","name":"unrequire_files(files)"}],[],[{"a":"#into/1","name":"into(collectable)"}],[],[],[{"a":"#config/2","name":"config(root_key, opts)"},{"a":"#config/3","name":"config(root_key, key, opts)"},{"a":"#config_env/0","name":"config_env()"},{"a":"#config_target/0","name":"config_target()"},{"a":"#import_config/1","name":"import_config(file)"}],[{"a":"#resolve_config_path!/1","name":"resolve_config_path!(path)config_path/0"},{"a":"#validate_config_path!/1","name":"validate_config_path!(path)config_path/0"}],[{"a":"#eval!/3","name":"eval!(file, contents, opts \\\\ [])"},{"a":"#merge/2","name":"merge(config1, config2)"},{"a":"#read!/2","name":"read!(file, opts \\\\ [])"},{"a":"#read_imports!/2","name":"read_imports!(file, opts \\\\ [])"}],[{"a":"#add/2","name":"add(date, days)"},{"a":"#beginning_of_month/1","name":"beginning_of_month(map)"},{"a":"#beginning_of_week/2","name":"beginning_of_week(date, starting_on \\\\ :default)"},{"a":"#compare/2","name":"compare(date1, date2)"},{"a":"#convert/2","name":"convert(date, calendar)"},{"a":"#convert!/2","name":"convert!(date, calendar)Date.convert/2ArgumentError"},{"a":"#day_of_era/1","name":"day_of_era(date)"},{"a":"#day_of_week/2","name":"day_of_week(date, starting_on \\\\ :default)"},{"a":"#day_of_year/1","name":"day_of_year(date)"},{"a":"#days_in_month/1","name":"days_in_month(date)"},{"a":"#diff/2","name":"diff(date1, date2)"},{"a":"#end_of_month/1","name":"end_of_month(date)"},{"a":"#end_of_week/2","name":"end_of_week(date, starting_on \\\\ :default)"},{"a":"#from_erl/2","name":"from_erl(tuple, calendar \\\\ Calendar.ISO)Date"},{"a":"#from_erl!/2","name":"from_erl!(tuple, calendar \\\\ Calendar.ISO)"},{"a":"#from_gregorian_days/2","name":"from_gregorian_days(days, calendar \\\\ Calendar.ISO)Date"},{"a":"#from_iso8601/2","name":"from_iso8601(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#from_iso8601!/2","name":"from_iso8601!(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#leap_year?/1","name":"leap_year?(date)"},{"a":"#months_in_year/1","name":"months_in_year(date)"},{"a":"#new/4","name":"new(year, month, day, calendar \\\\ Calendar.ISO)"},{"a":"#new!/4","name":"new!(year, month, day, calendar \\\\ Calendar.ISO)"},{"a":"#quarter_of_year/1","name":"quarter_of_year(date)"},{"a":"#range/2","name":"range(first, last)"},{"a":"#to_erl/1","name":"to_erl(date)"},{"a":"#to_gregorian_days/1","name":"to_gregorian_days(date)"},{"a":"#to_iso8601/2","name":"to_iso8601(date, format \\\\ :extended)ISO 8601:2004"},{"a":"#to_string/1","name":"to_string(date)"},{"a":"#utc_today/1","name":"utc_today(calendar \\\\ Calendar.ISO)"},{"a":"#year_of_era/1","name":"year_of_era(date)"}],[],[{"a":"#add/4","name":"add(datetime, amount_to_add, unit \\\\ :second, time_zone_database \\\\ Calendar.get_time_zone_database())DateTime"},{"a":"#compare/2","name":"compare(datetime1, datetime2)"},{"a":"#convert/2","name":"convert(datetime, calendar)"},{"a":"#convert!/2","name":"convert!(datetime, calendar)"},{"a":"#diff/3","name":"diff(datetime1, datetime2, unit \\\\ :second)"},{"a":"#from_gregorian_seconds/3","name":"from_gregorian_seconds(seconds, arg \\\\ {0, 0}, calendar \\\\ Calendar.ISO)DateTime"},{"a":"#from_iso8601/2","name":"from_iso8601(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#from_naive/3","name":"from_naive(naive_datetime, time_zone, time_zone_database \\\\ Calendar.get_time_zone_database())NaiveDateTimeDateTime"},{"a":"#from_naive!/3","name":"from_naive!(naive_datetime, time_zone, time_zone_database \\\\ Calendar.get_time_zone_database())NaiveDateTimeDateTime"},{"a":"#from_unix/3","name":"from_unix(integer, unit \\\\ :second, calendar \\\\ Calendar.ISO)DateTime"},{"a":"#from_unix!/3","name":"from_unix!(integer, unit \\\\ :second, calendar \\\\ Calendar.ISO)DateTime"},{"a":"#new/4","name":"new(date, time, time_zone \\\\ \"Etc/UTC\", time_zone_database \\\\ Calendar.get_time_zone_database())"},{"a":"#new!/4","name":"new!(date, time, time_zone \\\\ \"Etc/UTC\", time_zone_database \\\\ Calendar.get_time_zone_database())"},{"a":"#now/2","name":"now(time_zone, time_zone_database \\\\ Calendar.get_time_zone_database())"},{"a":"#now!/2","name":"now!(time_zone, time_zone_database \\\\ Calendar.get_time_zone_database())"},{"a":"#shift_zone/3","name":"shift_zone(datetime, time_zone, time_zone_database \\\\ Calendar.get_time_zone_database())DateTime"},{"a":"#shift_zone!/3","name":"shift_zone!(datetime, time_zone, time_zone_database \\\\ Calendar.get_time_zone_database())DateTime"},{"a":"#to_date/1","name":"to_date(map)DateTimeDate"},{"a":"#to_gregorian_seconds/1","name":"to_gregorian_seconds(datetime)DateTime"},{"a":"#to_iso8601/2","name":"to_iso8601(datetime, format \\\\ :extended)ISO 8601:2004"},{"a":"#to_naive/1","name":"to_naive(map)NaiveDateTime"},{"a":"#to_string/1","name":"to_string(datetime)"},{"a":"#to_time/1","name":"to_time(map)DateTimeTime"},{"a":"#to_unix/2","name":"to_unix(datetime, unit \\\\ :second)"},{"a":"#truncate/2","name":"truncate(datetime, precision)"},{"a":"#utc_now/1","name":"utc_now(calendar \\\\ Calendar.ISO)"}],[{"a":"#delete/2","name":"delete(dict, key)"},{"a":"#drop/2","name":"drop(dict, keys)"},{"a":"#empty/1","name":"empty(dict)"},{"a":"#equal?/2","name":"equal?(dict1, dict2)"},{"a":"#fetch/2","name":"fetch(dict, key)"},{"a":"#fetch!/2","name":"fetch!(dict, key)"},{"a":"#get/3","name":"get(dict, key, default \\\\ nil)"},{"a":"#get_and_update/3","name":"get_and_update(dict, key, fun)"},{"a":"#get_lazy/3","name":"get_lazy(dict, key, fun)"},{"a":"#has_key?/2","name":"has_key?(dict, key)"},{"a":"#keys/1","name":"keys(dict)"},{"a":"#merge/2","name":"merge(dict1, dict2)"},{"a":"#merge/3","name":"merge(dict1, dict2, fun)"},{"a":"#pop/3","name":"pop(dict, key, default \\\\ nil)"},{"a":"#pop_lazy/3","name":"pop_lazy(dict, key, fun)"},{"a":"#put/3","name":"put(dict, key, val)"},{"a":"#put_new/3","name":"put_new(dict, key, val)"},{"a":"#put_new_lazy/3","name":"put_new_lazy(dict, key, fun)"},{"a":"#size/1","name":"size(dict)"},{"a":"#split/2","name":"split(dict, keys)"},{"a":"#take/2","name":"take(dict, keys)"},{"a":"#to_list/1","name":"to_list(dict)"},{"a":"#update/4","name":"update(dict, key, default, fun)"},{"a":"#update!/3","name":"update!(dict, key, fun)"},{"a":"#values/1","name":"values(dict)"}],[{"a":"#child_spec/1","name":"child_spec(opts)"},{"a":"#count_children/1","name":"count_children(supervisor)"},{"a":"#init/1","name":"init(options)"},{"a":"#start_child/2","name":"start_child(supervisor, child_spec)"},{"a":"#start_link/1","name":"start_link(options)"},{"a":"#start_link/3","name":"start_link(mod, init_arg, opts \\\\ [])"},{"a":"#stop/3","name":"stop(supervisor, reason \\\\ :normal, timeout \\\\ :infinity)"},{"a":"#terminate_child/2","name":"terminate_child(supervisor, pid)"},{"a":"#which_children/1","name":"which_children(supervisor)"}],[{"a":"#all?/2","name":"all?(enumerable, fun \\\\ fn x -> x end)"},{"a":"#any?/2","name":"any?(enumerable, fun \\\\ fn x -> x end)"},{"a":"#at/3","name":"at(enumerable, index, default \\\\ nil)"},{"a":"#chunk_by/2","name":"chunk_by(enumerable, fun)"},{"a":"#chunk_every/2","name":"chunk_every(enumerable, count)"},{"a":"#chunk_every/4","name":"chunk_every(enumerable, count, step, leftover \\\\ [])"},{"a":"#chunk_while/4","name":"chunk_while(enumerable, acc, chunk_fun, after_fun)"},{"a":"#concat/1","name":"concat(enumerables)"},{"a":"#concat/2","name":"concat(left, right)"},{"a":"#count/1","name":"count(enumerable)"},{"a":"#count/2","name":"count(enumerable, fun)"},{"a":"#dedup/1","name":"dedup(enumerable)"},{"a":"#dedup_by/2","name":"dedup_by(enumerable, fun)"},{"a":"#drop/2","name":"drop(enumerable, amount)"},{"a":"#drop_every/2","name":"drop_every(enumerable, nth)"},{"a":"#drop_while/2","name":"drop_while(enumerable, fun)"},{"a":"#each/2","name":"each(enumerable, fun)"},{"a":"#empty?/1","name":"empty?(enumerable)"},{"a":"#fetch/2","name":"fetch(enumerable, index)"},{"a":"#fetch!/2","name":"fetch!(enumerable, index)"},{"a":"#filter/2","name":"filter(enumerable, fun)"},{"a":"#find/3","name":"find(enumerable, default \\\\ nil, fun)"},{"a":"#find_index/2","name":"find_index(enumerable, fun)find/3"},{"a":"#find_value/3","name":"find_value(enumerable, default \\\\ nil, fun)find/3"},{"a":"#flat_map/2","name":"flat_map(enumerable, fun)"},{"a":"#flat_map_reduce/3","name":"flat_map_reduce(enumerable, acc, fun)"},{"a":"#frequencies/1","name":"frequencies(enumerable)"},{"a":"#frequencies_by/2","name":"frequencies_by(enumerable, key_fun)"},{"a":"#group_by/3","name":"group_by(enumerable, key_fun, value_fun \\\\ fn x -> x end)"},{"a":"#intersperse/2","name":"intersperse(enumerable, element)"},{"a":"#into/2","name":"into(enumerable, collectable)"},{"a":"#into/3","name":"into(enumerable, collectable, transform)"},{"a":"#join/2","name":"join(enumerable, joiner \\\\ \"\")"},{"a":"#map/2","name":"map(enumerable, fun)"},{"a":"#map_every/3","name":"map_every(enumerable, nth, fun)"},{"a":"#map_intersperse/3","name":"map_intersperse(enumerable, separator, mapper)"},{"a":"#map_join/3","name":"map_join(enumerable, joiner \\\\ \"\", mapper)"},{"a":"#map_reduce/3","name":"map_reduce(enumerable, acc, fun)"},{"a":"#max/3","name":"max(enumerable, sorter \\\\ &>=/2, empty_fallback \\\\ fn -> raise(Enum.EmptyError) end)"},{"a":"#max_by/4","name":"max_by(enumerable, fun, sorter \\\\ &>=/2, empty_fallback \\\\ fn -> raise(Enum.EmptyError) end)"},{"a":"#member?/2","name":"member?(enumerable, element)"},{"a":"#min/3","name":"min(enumerable, sorter \\\\ &<=/2, empty_fallback \\\\ fn -> raise(Enum.EmptyError) end)"},{"a":"#min_by/4","name":"min_by(enumerable, fun, sorter \\\\ &<=/2, empty_fallback \\\\ fn -> raise(Enum.EmptyError) end)"},{"a":"#min_max/2","name":"min_max(enumerable, empty_fallback \\\\ fn -> raise(Enum.EmptyError) end)"},{"a":"#min_max_by/4","name":"min_max_by(enumerable, fun, sorter_or_empty_fallback \\\\ &</2, empty_fallback \\\\ fn -> raise(Enum.EmptyError) end)"},{"a":"#random/1","name":"random(enumerable)"},{"a":"#reduce/2","name":"reduce(enumerable, fun)"},{"a":"#reduce/3","name":"reduce(enumerable, acc, fun)"},{"a":"#reduce_while/3","name":"reduce_while(enumerable, acc, fun)"},{"a":"#reject/2","name":"reject(enumerable, fun)"},{"a":"#reverse/1","name":"reverse(enumerable)"},{"a":"#reverse/2","name":"reverse(enumerable, tail)"},{"a":"#reverse_slice/3","name":"reverse_slice(enumerable, start_index, count)"},{"a":"#scan/2","name":"scan(enumerable, fun)"},{"a":"#scan/3","name":"scan(enumerable, acc, fun)"},{"a":"#shuffle/1","name":"shuffle(enumerable)"},{"a":"#slice/2","name":"slice(enumerable, index_range)"},{"a":"#slice/3","name":"slice(enumerable, start_index, amount)"},{"a":"#sort/1","name":"sort(enumerable)"},{"a":"#sort/2","name":"sort(enumerable, fun)"},{"a":"#sort_by/3","name":"sort_by(enumerable, mapper, sorter \\\\ &<=/2)"},{"a":"#split/2","name":"split(enumerable, count)"},{"a":"#split_while/2","name":"split_while(enumerable, fun)"},{"a":"#split_with/2","name":"split_with(enumerable, fun)"},{"a":"#sum/1","name":"sum(enumerable)"},{"a":"#take/2","name":"take(enumerable, amount)"},{"a":"#take_every/2","name":"take_every(enumerable, nth)"},{"a":"#take_random/2","name":"take_random(enumerable, count)"},{"a":"#take_while/2","name":"take_while(enumerable, fun)"},{"a":"#to_list/1","name":"to_list(enumerable)"},{"a":"#uniq/1","name":"uniq(enumerable)"},{"a":"#uniq_by/2","name":"uniq_by(enumerable, fun)"},{"a":"#unzip/1","name":"unzip(enumerable)zip/2"},{"a":"#with_index/2","name":"with_index(enumerable, offset \\\\ 0)"},{"a":"#zip/1","name":"zip(enumerables)"},{"a":"#zip/2","name":"zip(enumerable1, enumerable2)"}],[],[],[{"a":"#count/1","name":"count(enumerable)"},{"a":"#member?/2","name":"member?(enumerable, element)"},{"a":"#reduce/3","name":"reduce(enumerable, acc, fun)"},{"a":"#slice/1","name":"slice(enumerable)"}],[],[{"a":"#blame/3","name":"blame(kind, error, stacktrace)"},{"a":"#blame_mfa/3","name":"blame_mfa(module, function, args)"},{"a":"#exception?/1","name":"exception?(term)"},{"a":"#format/3","name":"format(kind, payload, stacktrace \\\\ [])"},{"a":"#format_banner/3","name":"format_banner(kind, exception, stacktrace \\\\ [])"},{"a":"#format_exit/1","name":"format_exit(reason)"},{"a":"#format_fa/2","name":"format_fa(fun, arity)"},{"a":"#format_file_line/3","name":"format_file_line(file, line, suffix \\\\ \"\")"},{"a":"#format_file_line_column/4","name":"format_file_line_column(file, line, column, suffix \\\\ \"\")"},{"a":"#format_mfa/3","name":"format_mfa(module, fun, arity)"},{"a":"#format_stacktrace/1","name":"format_stacktrace(trace \\\\ nil)"},{"a":"#format_stacktrace_entry/1","name":"format_stacktrace_entry(entry)"},{"a":"#message/1","name":"message(exception)"},{"a":"#normalize/3","name":"normalize(kind, payload, stacktrace \\\\ [])"}],[{"a":"#cd/1","name":"cd(path)"},{"a":"#cd!/1","name":"cd!(path)cd/1File.Error"},{"a":"#cd!/2","name":"cd!(path, function)"},{"a":"#chgrp/2","name":"chgrp(path, gid)"},{"a":"#chgrp!/2","name":"chgrp!(path, gid)chgrp/2File.Error"},{"a":"#chmod/2","name":"chmod(path, mode)"},{"a":"#chmod!/2","name":"chmod!(path, mode)chmod/2File.Error"},{"a":"#chown/2","name":"chown(path, uid)"},{"a":"#chown!/2","name":"chown!(path, uid)chown/2File.Error"},{"a":"#close/1","name":"close(io_device)"},{"a":"#copy/3","name":"copy(source, destination, bytes_count \\\\ :infinity)"},{"a":"#copy!/3","name":"copy!(source, destination, bytes_count \\\\ :infinity)copy/3File.CopyError"},{"a":"#cp/3","name":"cp(source_file, destination_file, callback \\\\ fn _, _ -> true end)"},{"a":"#cp!/3","name":"cp!(source_file, destination_file, callback \\\\ fn _, _ -> true end)cp/3File.CopyError"},{"a":"#cp_r/3","name":"cp_r(source, destination, callback \\\\ fn _, _ -> true end)"},{"a":"#cp_r!/3","name":"cp_r!(source, destination, callback \\\\ fn _, _ -> true end)cp_r/3File.CopyError"},{"a":"#cwd/0","name":"cwd()"},{"a":"#cwd!/0","name":"cwd!()cwd/0File.Error"},{"a":"#dir?/2","name":"dir?(path, opts \\\\ [])"},{"a":"#exists?/2","name":"exists?(path, opts \\\\ [])"},{"a":"#ln/2","name":"ln(existing, new)"},{"a":"#ln!/2","name":"ln!(existing, new)ln/2File.LinkError"},{"a":"#ln_s/2","name":"ln_s(existing, new)"},{"a":"#ln_s!/2","name":"ln_s!(existing, new)ln_s/2File.LinkError"},{"a":"#ls/1","name":"ls(path \\\\ \".\")"},{"a":"#ls!/1","name":"ls!(path \\\\ \".\")ls/1File.Error"},{"a":"#lstat/2","name":"lstat(path, opts \\\\ [])File.Statstat/2"},{"a":"#lstat!/2","name":"lstat!(path, opts \\\\ [])lstat/2File.StatFile.Error"},{"a":"#mkdir/1","name":"mkdir(path)"},{"a":"#mkdir!/1","name":"mkdir!(path)mkdir/1File.Error"},{"a":"#mkdir_p/1","name":"mkdir_p(path)"},{"a":"#mkdir_p!/1","name":"mkdir_p!(path)mkdir_p/1File.Error"},{"a":"#open/2","name":"open(path, modes_or_function \\\\ [])"},{"a":"#open/3","name":"open(path, modes, function)open/2"},{"a":"#open!/2","name":"open!(path, modes_or_function \\\\ [])open/2File.Error"},{"a":"#open!/3","name":"open!(path, modes, function)open/3File.Error"},{"a":"#read/1","name":"read(path)"},{"a":"#read!/1","name":"read!(path)File.Error"},{"a":"#read_link/1","name":"read_link(path)"},{"a":"#read_link!/1","name":"read_link!(path)read_link/1File.Error"},{"a":"#regular?/2","name":"regular?(path, opts \\\\ [])"},{"a":"#rename/2","name":"rename(source, destination)"},{"a":"#rename!/2","name":"rename!(source, destination)rename/2File.RenameError"},{"a":"#rm/1","name":"rm(path)"},{"a":"#rm!/1","name":"rm!(path)rm/1File.Error"},{"a":"#rm_rf/1","name":"rm_rf(path)"},{"a":"#rm_rf!/1","name":"rm_rf!(path)rm_rf/1File.Error"},{"a":"#rmdir/1","name":"rmdir(path)"},{"a":"#rmdir!/1","name":"rmdir!(path)rmdir/1File.Error"},{"a":"#stat/2","name":"stat(path, opts \\\\ [])File.Statread/1"},{"a":"#stat!/2","name":"stat!(path, opts \\\\ [])stat/2File.StatFile.Error"},{"a":"#stream!/3","name":"stream!(path, modes \\\\ [], line_or_bytes \\\\ :line)File.Stream"},{"a":"#touch/2","name":"touch(path, time \\\\ System.os_time(:second))"},{"a":"#touch!/2","name":"touch!(path, time \\\\ System.os_time(:second))touch/2File.Error"},{"a":"#write/3","name":"write(path, content, modes \\\\ [])"},{"a":"#write!/3","name":"write!(path, content, modes \\\\ [])write/3File.Error"},{"a":"#write_stat/3","name":"write_stat(path, stat, opts \\\\ [])File.Stat"},{"a":"#write_stat!/3","name":"write_stat!(path, stat, opts \\\\ [])write_stat/3File.Error"}],[],[],[],[],[{"a":"#from_record/1","name":"from_record(file_info)File.Stat"},{"a":"#to_record/1","name":"to_record(stat)File.Stat"}],[],[{"a":"#ceil/2","name":"ceil(number, precision \\\\ 0)"},{"a":"#floor/2","name":"floor(number, precision \\\\ 0)"},{"a":"#parse/1","name":"parse(binary)"},{"a":"#ratio/1","name":"ratio(float)"},{"a":"#round/2","name":"round(float, precision \\\\ 0)"},{"a":"#to_charlist/1","name":"to_charlist(float)"},{"a":"#to_string/1","name":"to_string(float)"}],[{"a":"#capture/3","name":"capture(module, function_name, arity)"},{"a":"#identity/1","name":"identity(value)"},{"a":"#info/1","name":"info(fun)"},{"a":"#info/2","name":"info(fun, item)"}],[],[],[{"a":"#abcast/3","name":"abcast(nodes \\\\ [node() | Node.list()], name, request)"},{"a":"#call/3","name":"call(server, request, timeout \\\\ 5000)"},{"a":"#cast/2","name":"cast(server, request)"},{"a":"#multi_call/4","name":"multi_call(nodes \\\\ [node() | Node.list()], name, request, timeout \\\\ :infinity)"},{"a":"#reply/2","name":"reply(client, reply)"},{"a":"#start/3","name":"start(module, init_arg, options \\\\ [])GenServer"},{"a":"#start_link/3","name":"start_link(module, init_arg, options \\\\ [])GenServer"},{"a":"#stop/3","name":"stop(server, reason \\\\ :normal, timeout \\\\ :infinity)"},{"a":"#whereis/1","name":"whereis(server)"}],[{"a":"#delete/2","name":"delete(dict, key)"},{"a":"#drop/2","name":"drop(dict, keys)"},{"a":"#equal?/2","name":"equal?(dict1, dict2)"},{"a":"#fetch/2","name":"fetch(hash_dict, key)"},{"a":"#fetch!/2","name":"fetch!(dict, key)"},{"a":"#get/3","name":"get(dict, key, default \\\\ nil)"},{"a":"#get_and_update/3","name":"get_and_update(dict, key, fun)"},{"a":"#get_lazy/3","name":"get_lazy(dict, key, fun)"},{"a":"#has_key?/2","name":"has_key?(dict, key)"},{"a":"#keys/1","name":"keys(dict)"},{"a":"#merge/3","name":"merge(dict1, dict2, fun \\\\ fn _k, _v1, v2 -> v2 end)"},{"a":"#new/0","name":"new()"},{"a":"#pop/3","name":"pop(dict, key, default \\\\ nil)"},{"a":"#pop_lazy/3","name":"pop_lazy(dict, key, fun)"},{"a":"#put/3","name":"put(hash_dict, key, value)"},{"a":"#put_new/3","name":"put_new(dict, key, value)"},{"a":"#put_new_lazy/3","name":"put_new_lazy(dict, key, fun)"},{"a":"#size/1","name":"size(hash_dict)"},{"a":"#split/2","name":"split(dict, keys)"},{"a":"#take/2","name":"take(dict, keys)"},{"a":"#to_list/1","name":"to_list(dict)"},{"a":"#update/4","name":"update(dict, key, default, fun)"},{"a":"#update!/3","name":"update!(dict, key, fun)"},{"a":"#values/1","name":"values(dict)"}],[{"a":"#delete/2","name":"delete(set, term)"},{"a":"#difference/2","name":"difference(set1, set2)"},{"a":"#disjoint?/2","name":"disjoint?(set1, set2)"},{"a":"#equal?/2","name":"equal?(set1, set2)"},{"a":"#intersection/2","name":"intersection(set1, set2)"},{"a":"#member?/2","name":"member?(hash_set, term)"},{"a":"#new/0","name":"new()"},{"a":"#put/2","name":"put(hash_set, term)"},{"a":"#size/1","name":"size(hash_set)"},{"a":"#subset?/2","name":"subset?(set1, set2)"},{"a":"#to_list/1","name":"to_list(set)"},{"a":"#union/2","name":"union(set1, set2)"}],[{"a":"#binread/2","name":"binread(device \\\\ :stdio, line_or_chars)"},{"a":"#binstream/2","name":"binstream(device, line_or_bytes)IO.Stream"},{"a":"#binwrite/2","name":"binwrite(device \\\\ :stdio, iodata)"},{"a":"#chardata_to_string/1","name":"chardata_to_string(string)"},{"a":"#getn/2","name":"getn(prompt, count \\\\ 1)"},{"a":"#getn/3","name":"getn(device, prompt, count)"},{"a":"#gets/2","name":"gets(device \\\\ :stdio, prompt)"},{"a":"#inspect/2","name":"inspect(item, opts \\\\ [])"},{"a":"#inspect/3","name":"inspect(device, item, opts)"},{"a":"#iodata_length/1","name":"iodata_length(iodata)"},{"a":"#iodata_to_binary/1","name":"iodata_to_binary(iodata)"},{"a":"#puts/2","name":"puts(device \\\\ :stdio, item)write/2"},{"a":"#read/2","name":"read(device \\\\ :stdio, line_or_chars)"},{"a":"#stream/2","name":"stream(device, line_or_codepoints)IO.Stream"},{"a":"#warn/1","name":"warn(message)"},{"a":"#warn/2","name":"warn(message, stacktrace)"},{"a":"#write/2","name":"write(device \\\\ :stdio, chardata)"}],[{"a":"#black/0","name":"black()"},{"a":"#black_background/0","name":"black_background()"},{"a":"#blink_off/0","name":"blink_off()"},{"a":"#blink_rapid/0","name":"blink_rapid()"},{"a":"#blink_slow/0","name":"blink_slow()"},{"a":"#blue/0","name":"blue()"},{"a":"#blue_background/0","name":"blue_background()"},{"a":"#bright/0","name":"bright()"},{"a":"#clear/0","name":"clear()"},{"a":"#clear_line/0","name":"clear_line()"},{"a":"#color/1","name":"color(code)"},{"a":"#color/3","name":"color(r, g, b)"},{"a":"#color_background/1","name":"color_background(code)"},{"a":"#color_background/3","name":"color_background(r, g, b)"},{"a":"#conceal/0","name":"conceal()"},{"a":"#crossed_out/0","name":"crossed_out()"},{"a":"#cursor/2","name":"cursor(line, column)"},{"a":"#cursor_down/1","name":"cursor_down(lines \\\\ 1)"},{"a":"#cursor_left/1","name":"cursor_left(columns \\\\ 1)"},{"a":"#cursor_right/1","name":"cursor_right(columns \\\\ 1)"},{"a":"#cursor_up/1","name":"cursor_up(lines \\\\ 1)"},{"a":"#cyan/0","name":"cyan()"},{"a":"#cyan_background/0","name":"cyan_background()"},{"a":"#default_background/0","name":"default_background()"},{"a":"#default_color/0","name":"default_color()"},{"a":"#enabled?/0","name":"enabled?()"},{"a":"#encircled/0","name":"encircled()"},{"a":"#faint/0","name":"faint()"},{"a":"#font_1/0","name":"font_1()"},{"a":"#font_2/0","name":"font_2()"},{"a":"#font_3/0","name":"font_3()"},{"a":"#font_4/0","name":"font_4()"},{"a":"#font_5/0","name":"font_5()"},{"a":"#font_6/0","name":"font_6()"},{"a":"#font_7/0","name":"font_7()"},{"a":"#font_8/0","name":"font_8()"},{"a":"#font_9/0","name":"font_9()"},{"a":"#format/2","name":"format(chardata, emit? \\\\ enabled?())"},{"a":"#format_fragment/2","name":"format_fragment(chardata, emit? \\\\ enabled?())"},{"a":"#framed/0","name":"framed()"},{"a":"#green/0","name":"green()"},{"a":"#green_background/0","name":"green_background()"},{"a":"#home/0","name":"home()"},{"a":"#inverse/0","name":"inverse()"},{"a":"#inverse_off/0","name":"inverse_off()"},{"a":"#italic/0","name":"italic()"},{"a":"#light_black/0","name":"light_black()"},{"a":"#light_black_background/0","name":"light_black_background()"},{"a":"#light_blue/0","name":"light_blue()"},{"a":"#light_blue_background/0","name":"light_blue_background()"},{"a":"#light_cyan/0","name":"light_cyan()"},{"a":"#light_cyan_background/0","name":"light_cyan_background()"},{"a":"#light_green/0","name":"light_green()"},{"a":"#light_green_background/0","name":"light_green_background()"},{"a":"#light_magenta/0","name":"light_magenta()"},{"a":"#light_magenta_background/0","name":"light_magenta_background()"},{"a":"#light_red/0","name":"light_red()"},{"a":"#light_red_background/0","name":"light_red_background()"},{"a":"#light_white/0","name":"light_white()"},{"a":"#light_white_background/0","name":"light_white_background()"},{"a":"#light_yellow/0","name":"light_yellow()"},{"a":"#light_yellow_background/0","name":"light_yellow_background()"},{"a":"#magenta/0","name":"magenta()"},{"a":"#magenta_background/0","name":"magenta_background()"},{"a":"#no_underline/0","name":"no_underline()"},{"a":"#normal/0","name":"normal()"},{"a":"#not_framed_encircled/0","name":"not_framed_encircled()"},{"a":"#not_italic/0","name":"not_italic()"},{"a":"#not_overlined/0","name":"not_overlined()"},{"a":"#overlined/0","name":"overlined()"},{"a":"#primary_font/0","name":"primary_font()"},{"a":"#red/0","name":"red()"},{"a":"#red_background/0","name":"red_background()"},{"a":"#reset/0","name":"reset()"},{"a":"#reverse/0","name":"reverse()"},{"a":"#reverse_off/0","name":"reverse_off()"},{"a":"#underline/0","name":"underline()"},{"a":"#white/0","name":"white()"},{"a":"#white_background/0","name":"white_background()"},{"a":"#yellow/0","name":"yellow()"},{"a":"#yellow_background/0","name":"yellow_background()"}],[],[],[{"a":"#inspect/2","name":"inspect(term, opts)"}],[{"a":"#break/1","name":"break(string \\\\ \" \")"},{"a":"#collapse_lines/1","name":"collapse_lines(max)"},{"a":"#color/3","name":"color(doc, color_key, opts)"},{"a":"#concat/1","name":"concat(docs)"},{"a":"#concat/2","name":"concat(doc1, doc2)"},{"a":"#container_doc/6","name":"container_doc(left, collection, right, inspect_opts, fun, opts \\\\ [])"},{"a":"#empty/0","name":"empty()"},{"a":"#flex_break/1","name":"flex_break(string \\\\ \" \")"},{"a":"#flex_glue/3","name":"flex_glue(doc1, break_string \\\\ \" \", doc2)flex_break/1"},{"a":"#fold_doc/2","name":"fold_doc(docs, folder_fun)"},{"a":"#force_unfit/1","name":"force_unfit(doc)"},{"a":"#format/2","name":"format(doc, width)"},{"a":"#glue/3","name":"glue(doc1, break_string \\\\ \" \", doc2)"},{"a":"#group/2","name":"group(doc, mode \\\\ :self)"},{"a":"#line/0","name":"line()"},{"a":"#line/2","name":"line(doc1, doc2)"},{"a":"#nest/3","name":"nest(doc, level, mode \\\\ :always)"},{"a":"#next_break_fits/2","name":"next_break_fits(doc, mode \\\\ :enabled)"},{"a":"#space/2","name":"space(doc1, doc2)"},{"a":"#string/1","name":"string(string)"},{"a":"#to_doc/2","name":"to_doc(term, opts)Inspect"}],[],[],[{"a":"#digits/2","name":"digits(integer, base \\\\ 10)"},{"a":"#floor_div/2","name":"floor_div(dividend, divisor)"},{"a":"#gcd/2","name":"gcd(integer1, integer2)"},{"a":"#mod/2","name":"mod(dividend, divisor)"},{"a":"#parse/2","name":"parse(binary, base \\\\ 10)"},{"a":"#to_charlist/1","name":"to_charlist(integer)"},{"a":"#to_charlist/2","name":"to_charlist(integer, base)"},{"a":"#to_string/1","name":"to_string(integer)"},{"a":"#to_string/2","name":"to_string(integer, base)"},{"a":"#undigits/2","name":"undigits(digits, base \\\\ 10)"}],[{"a":"#!/1","name":"!value"},{"a":"#&&/2","name":"left && right"},{"a":"#++/2","name":"left ++ right"},{"a":"#--/2","name":"left -- right"},{"a":"#../2","name":"first..last"},{"a":"#%3C%3E/2","name":"left <> right"},{"a":"#=~/2","name":"left =~ right"},{"a":"#@/1","name":"@expr"},{"a":"#%7C%3E/2","name":"left |> right"},{"a":"#%7C%7C/2","name":"left || right"},{"a":"#alias!/1","name":"alias!(alias)"},{"a":"#apply/2","name":"apply(fun, args)"},{"a":"#apply/3","name":"apply(module, function_name, args)"},{"a":"#binding/1","name":"binding(context \\\\ nil)"},{"a":"#def/2","name":"def(call, expr \\\\ nil)"},{"a":"#defdelegate/2","name":"defdelegate(funs, opts)"},{"a":"#defexception/1","name":"defexception(fields)"},{"a":"#defguard/1","name":"defguard(guard)"},{"a":"#defguardp/1","name":"defguardp(guard)"},{"a":"#defimpl/3","name":"defimpl(name, opts, do_block \\\\ [])"},{"a":"#defmacro/2","name":"defmacro(call, expr \\\\ nil)"},{"a":"#defmacrop/2","name":"defmacrop(call, expr \\\\ nil)"},{"a":"#defmodule/2","name":"defmodule(alias, do_block)"},{"a":"#defoverridable/1","name":"defoverridable(keywords_or_behaviour)"},{"a":"#defp/2","name":"defp(call, expr \\\\ nil)"},{"a":"#defprotocol/2","name":"defprotocol(name, do_block)"},{"a":"#defstruct/1","name":"defstruct(fields)"},{"a":"#destructure/2","name":"destructure(left, right)"},{"a":"#exit/1","name":"exit(reason)"},{"a":"#function_exported?/3","name":"function_exported?(module, function, arity)"},{"a":"#get_and_update_in/2","name":"get_and_update_in(path, fun)"},{"a":"#get_and_update_in/3","name":"get_and_update_in(data, keys, fun)"},{"a":"#get_in/2","name":"get_in(data, keys)"},{"a":"#if/2","name":"if(condition, clauses)if/2"},{"a":"#inspect/2","name":"inspect(term, opts \\\\ [])Inspect"},{"a":"#macro_exported?/3","name":"macro_exported?(module, macro, arity)"},{"a":"#make_ref/0","name":"make_ref()"},{"a":"#match?/2","name":"match?(pattern, expr)"},{"a":"#max/2","name":"max(first, second)"},{"a":"#min/2","name":"min(first, second)"},{"a":"#pop_in/1","name":"pop_in(path)"},{"a":"#pop_in/2","name":"pop_in(data, keys)"},{"a":"#put_elem/3","name":"put_elem(tuple, index, value)"},{"a":"#put_in/2","name":"put_in(path, value)"},{"a":"#put_in/3","name":"put_in(data, keys, value)"},{"a":"#raise/1","name":"raise(message)"},{"a":"#raise/2","name":"raise(exception, attributes)"},{"a":"#reraise/2","name":"reraise(message, stacktrace)"},{"a":"#reraise/3","name":"reraise(exception, attributes, stacktrace)"},{"a":"#send/2","name":"send(dest, message)"},{"a":"#sigil_C/2","name":"sigil_C(term, modifiers)"},{"a":"#sigil_D/2","name":"sigil_D(date_string, modifiers)"},{"a":"#sigil_N/2","name":"sigil_N(naive_datetime_string, modifiers)"},{"a":"#sigil_R/2","name":"sigil_R(term, modifiers)"},{"a":"#sigil_S/2","name":"sigil_S(term, modifiers)"},{"a":"#sigil_T/2","name":"sigil_T(time_string, modifiers)"},{"a":"#sigil_U/2","name":"sigil_U(datetime_string, modifiers)DateTime"},{"a":"#sigil_W/2","name":"sigil_W(term, modifiers)"},{"a":"#sigil_c/2","name":"sigil_c(term, modifiers)"},{"a":"#sigil_r/2","name":"sigil_r(term, modifiers)"},{"a":"#sigil_s/2","name":"sigil_s(term, modifiers)"},{"a":"#sigil_w/2","name":"sigil_w(term, modifiers)"},{"a":"#spawn/1","name":"spawn(fun)"},{"a":"#spawn/3","name":"spawn(module, fun, args)"},{"a":"#spawn_link/1","name":"spawn_link(fun)"},{"a":"#spawn_link/3","name":"spawn_link(module, fun, args)"},{"a":"#spawn_monitor/1","name":"spawn_monitor(fun)"},{"a":"#spawn_monitor/3","name":"spawn_monitor(module, fun, args)"},{"a":"#struct/2","name":"struct(struct, fields \\\\ [])"},{"a":"#struct!/2","name":"struct!(struct, fields \\\\ [])struct/2"},{"a":"#throw/1","name":"throw(term)"},{"a":"#to_charlist/1","name":"to_charlist(term)List.Chars"},{"a":"#to_string/1","name":"to_string(term)String.Chars"},{"a":"#unless/2","name":"unless(condition, clauses)"},{"a":"#update_in/2","name":"update_in(path, fun)"},{"a":"#update_in/3","name":"update_in(data, keys, fun)"},{"a":"#use/2","name":"use(module, opts \\\\ [])"},{"a":"#var!/2","name":"var!(var, context \\\\ nil)"}],[{"a":"#async/1","name":"async(fun)"},{"a":"#compile/2","name":"compile(files, options \\\\ [])"},{"a":"#compile_to_path/3","name":"compile_to_path(files, path, options \\\\ [])"},{"a":"#require/2","name":"require(files, options \\\\ [])"}],[{"a":"#%25/2","name":"%struct{}"},{"a":"#%25%7B%7D/1","name":"%{}"},{"a":"#&/1","name":"&(expr)"},{"a":"#./2","name":"left . right"},{"a":"#::/2","name":"left :: right"},{"a":"#%3C%3C%3E%3E/1","name":"<<args>>"},{"a":"#=/2","name":"left = right"},{"a":"#%5E/1","name":"^var"},{"a":"#__CALLER__/0","name":"__CALLER__Macro.Env"},{"a":"#__DIR__/0","name":"__DIR__"},{"a":"#__ENV__/0","name":"__ENV__Macro.Env"},{"a":"#__MODULE__/0","name":"__MODULE__"},{"a":"#__STACKTRACE__/0","name":"__STACKTRACE__"},{"a":"#__aliases__/1","name":"__aliases__(args)"},{"a":"#__block__/1","name":"__block__(args)"},{"a":"#%7B%7D/1","name":"{args}"},{"a":"#alias/2","name":"alias(module, opts)alias/2"},{"a":"#case/2","name":"case(condition, clauses)"},{"a":"#cond/1","name":"cond(clauses)"},{"a":"#fn/1","name":"fn"},{"a":"#for/1","name":"for(args)"},{"a":"#import/2","name":"import(module, opts)"},{"a":"#quote/2","name":"quote(opts, block)"},{"a":"#receive/1","name":"receive(args)"},{"a":"#require/2","name":"require(module, opts)"},{"a":"#super/1","name":"super(args)Kernel.defoverridable/1"},{"a":"#try/1","name":"try(args)"},{"a":"#unquote/1","name":"unquote(expr)"},{"a":"#unquote_splicing/1","name":"unquote_splicing(expr)"},{"a":"#with/1","name":"with(args)"}],[],[{"a":"#delete/2","name":"delete(keywords, key)"},{"a":"#delete_first/2","name":"delete_first(keywords, key)"},{"a":"#drop/2","name":"drop(keywords, keys)"},{"a":"#equal?/2","name":"equal?(left, right)"},{"a":"#fetch/2","name":"fetch(keywords, key)"},{"a":"#fetch!/2","name":"fetch!(keywords, key)"},{"a":"#get/3","name":"get(keywords, key, default \\\\ nil)"},{"a":"#get_and_update/3","name":"get_and_update(keywords, key, fun)"},{"a":"#get_and_update!/3","name":"get_and_update!(keywords, key, fun)"},{"a":"#get_lazy/3","name":"get_lazy(keywords, key, fun)"},{"a":"#get_values/2","name":"get_values(keywords, key)"},{"a":"#has_key?/2","name":"has_key?(keywords, key)"},{"a":"#keys/1","name":"keys(keywords)"},{"a":"#keyword?/1","name":"keyword?(term)"},{"a":"#merge/2","name":"merge(keywords1, keywords2)"},{"a":"#merge/3","name":"merge(keywords1, keywords2, fun)"},{"a":"#new/0","name":"new()"},{"a":"#new/1","name":"new(pairs)"},{"a":"#new/2","name":"new(pairs, transform)"},{"a":"#pop/3","name":"pop(keywords, key, default \\\\ nil)"},{"a":"#pop!/2","name":"pop!(keywords, key)"},{"a":"#pop_first/3","name":"pop_first(keywords, key, default \\\\ nil)"},{"a":"#pop_lazy/3","name":"pop_lazy(keywords, key, fun)"},{"a":"#pop_values/2","name":"pop_values(keywords, key)"},{"a":"#put/3","name":"put(keywords, key, value)"},{"a":"#put_new/3","name":"put_new(keywords, key, value)"},{"a":"#put_new_lazy/3","name":"put_new_lazy(keywords, key, fun)"},{"a":"#replace/3","name":"replace(keywords, key, value)"},{"a":"#replace!/3","name":"replace!(keywords, key, value)"},{"a":"#split/2","name":"split(keywords, keys)"},{"a":"#take/2","name":"take(keywords, keys)"},{"a":"#to_list/1","name":"to_list(keyword)"},{"a":"#update/4","name":"update(keywords, key, default, fun)"},{"a":"#update!/3","name":"update!(keywords, key, fun)"},{"a":"#values/1","name":"values(keywords)"}],[{"a":"#ascii_printable?/2","name":"ascii_printable?(list, limit \\\\ :infinity)"},{"a":"#delete/2","name":"delete(list, element)"},{"a":"#delete_at/2","name":"delete_at(list, index)"},{"a":"#duplicate/2","name":"duplicate(elem, n)"},{"a":"#first/1","name":"first(list)"},{"a":"#flatten/1","name":"flatten(list)"},{"a":"#flatten/2","name":"flatten(list, tail)"},{"a":"#foldl/3","name":"foldl(list, acc, fun)"},{"a":"#foldr/3","name":"foldr(list, acc, fun)"},{"a":"#improper?/1","name":"improper?(list)"},{"a":"#insert_at/3","name":"insert_at(list, index, value)"},{"a":"#keydelete/3","name":"keydelete(list, key, position)"},{"a":"#keyfind/4","name":"keyfind(list, key, position, default \\\\ nil)"},{"a":"#keymember?/3","name":"keymember?(list, key, position)"},{"a":"#keyreplace/4","name":"keyreplace(list, key, position, new_tuple)"},{"a":"#keysort/2","name":"keysort(list, position)"},{"a":"#keystore/4","name":"keystore(list, key, position, new_tuple)"},{"a":"#keytake/3","name":"keytake(list, key, position)"},{"a":"#last/1","name":"last(list)"},{"a":"#myers_difference/2","name":"myers_difference(list1, list2)"},{"a":"#myers_difference/3","name":"myers_difference(list1, list2, diff_script)"},{"a":"#pop_at/3","name":"pop_at(list, index, default \\\\ nil)"},{"a":"#replace_at/3","name":"replace_at(list, index, value)"},{"a":"#starts_with?/2","name":"starts_with?(list, prefix)"},{"a":"#to_atom/1","name":"to_atom(charlist)"},{"a":"#to_charlist/1","name":"to_charlist(list)"},{"a":"#to_existing_atom/1","name":"to_existing_atom(charlist)ArgumentError"},{"a":"#to_float/1","name":"to_float(charlist)"},{"a":"#to_integer/1","name":"to_integer(charlist)"},{"a":"#to_integer/2","name":"to_integer(charlist, base)"},{"a":"#to_string/1","name":"to_string(list)"},{"a":"#to_tuple/1","name":"to_tuple(list)"},{"a":"#update_at/3","name":"update_at(list, index, fun)"},{"a":"#wrap/1","name":"wrap(term)"},{"a":"#zip/1","name":"zip(list_of_lists)"}],[{"a":"#to_charlist/1","name":"to_charlist(term)"}],[{"a":"#camelize/1","name":"camelize(string)"},{"a":"#decompose_call/1","name":"decompose_call(ast)"},{"a":"#escape/2","name":"escape(expr, opts \\\\ [])"},{"a":"#expand/2","name":"expand(ast, env)"},{"a":"#expand_once/2","name":"expand_once(ast, env)"},{"a":"#generate_arguments/2","name":"generate_arguments(amount, context)Macro.var/2"},{"a":"#operator?/2","name":"operator?(name, arity)"},{"a":"#pipe/3","name":"pipe(expr, call_args, position)"},{"a":"#postwalk/2","name":"postwalk(ast, fun)"},{"a":"#postwalk/3","name":"postwalk(ast, acc, fun)"},{"a":"#prewalk/2","name":"prewalk(ast, fun)"},{"a":"#prewalk/3","name":"prewalk(ast, acc, fun)"},{"a":"#quoted_literal?/1","name":"quoted_literal?(term)"},{"a":"#special_form?/2","name":"special_form?(name, arity)"},{"a":"#struct!/2","name":"struct!(module, env)"},{"a":"#to_string/2","name":"to_string(tree, fun \\\\ fn _ast, string -> string end)"},{"a":"#traverse/4","name":"traverse(ast, acc, pre, post)"},{"a":"#underscore/1","name":"underscore(atom)"},{"a":"#unescape_string/1","name":"unescape_string(chars)"},{"a":"#unescape_string/2","name":"unescape_string(chars, map)"},{"a":"#unpipe/1","name":"unpipe(expr)"},{"a":"#update_meta/2","name":"update_meta(quoted, fun)"},{"a":"#validate/1","name":"validate(expr)"},{"a":"#var/2","name":"var(var, context)"}],[{"a":"#has_var?/2","name":"has_var?(env, var)"},{"a":"#in_guard?/1","name":"in_guard?(env)"},{"a":"#in_match?/1","name":"in_match?(env)"},{"a":"#location/1","name":"location(env)"},{"a":"#stacktrace/1","name":"stacktrace(env)"},{"a":"#to_match/1","name":"to_match(env)Macro.Env"},{"a":"#vars/1","name":"vars(env)"}],[{"a":"#delete/2","name":"delete(map, key)"},{"a":"#drop/2","name":"drop(map, keys)"},{"a":"#equal?/2","name":"equal?(map1, map2)"},{"a":"#fetch/2","name":"fetch(map, key)"},{"a":"#fetch!/2","name":"fetch!(map, key)"},{"a":"#from_struct/1","name":"from_struct(struct)"},{"a":"#get/3","name":"get(map, key, default \\\\ nil)"},{"a":"#get_and_update/3","name":"get_and_update(map, key, fun)"},{"a":"#get_and_update!/3","name":"get_and_update!(map, key, fun)"},{"a":"#get_lazy/3","name":"get_lazy(map, key, fun)"},{"a":"#has_key?/2","name":"has_key?(map, key)"},{"a":"#keys/1","name":"keys(map)"},{"a":"#merge/2","name":"merge(map1, map2)"},{"a":"#merge/3","name":"merge(map1, map2, fun)"},{"a":"#new/0","name":"new()"},{"a":"#new/1","name":"new(enumerable)"},{"a":"#new/2","name":"new(enumerable, transform)"},{"a":"#pop/3","name":"pop(map, key, default \\\\ nil)"},{"a":"#pop!/2","name":"pop!(map, key)"},{"a":"#pop_lazy/3","name":"pop_lazy(map, key, fun)"},{"a":"#put/3","name":"put(map, key, value)"},{"a":"#put_new/3","name":"put_new(map, key, value)"},{"a":"#put_new_lazy/3","name":"put_new_lazy(map, key, fun)"},{"a":"#replace/3","name":"replace(map, key, value)"},{"a":"#replace!/3","name":"replace!(map, key, value)"},{"a":"#split/2","name":"split(map, keys)"},{"a":"#take/2","name":"take(map, keys)"},{"a":"#to_list/1","name":"to_list(map)"},{"a":"#update/4","name":"update(map, key, default, fun)"},{"a":"#update!/3","name":"update!(map, key, fun)"},{"a":"#values/1","name":"values(map)"}],[{"a":"#delete/2","name":"delete(map_set, value)"},{"a":"#difference/2","name":"difference(map_set1, map_set2)"},{"a":"#disjoint?/2","name":"disjoint?(map_set1, map_set2)"},{"a":"#equal?/2","name":"equal?(map_set1, map_set2)"},{"a":"#intersection/2","name":"intersection(map_set, map_set)"},{"a":"#member?/2","name":"member?(map_set, value)"},{"a":"#new/0","name":"new()"},{"a":"#new/1","name":"new(enumerable)"},{"a":"#new/2","name":"new(enumerable, transform)"},{"a":"#put/2","name":"put(map_set, value)"},{"a":"#size/1","name":"size(map_set)"},{"a":"#subset?/2","name":"subset?(map_set1, map_set2)"},{"a":"#to_list/1","name":"to_list(map_set)"},{"a":"#union/2","name":"union(map_set1, map_set2)"}],[],[{"a":"#concat/1","name":"concat(list)"},{"a":"#concat/2","name":"concat(left, right)"},{"a":"#create/3","name":"create(module, quoted, opts)"},{"a":"#defines?/2","name":"defines?(module, tuple)"},{"a":"#defines?/3","name":"defines?(module, tuple, def_kind)"},{"a":"#defines_type?/2","name":"defines_type?(module, definition)"},{"a":"#definitions_in/1","name":"definitions_in(module)"},{"a":"#definitions_in/2","name":"definitions_in(module, kind)"},{"a":"#delete_attribute/2","name":"delete_attribute(module, key)"},{"a":"#eval_quoted/4","name":"eval_quoted(module_or_env, quoted, binding \\\\ [], opts \\\\ [])"},{"a":"#get_attribute/3","name":"get_attribute(module, key, default \\\\ nil)"},{"a":"#has_attribute?/2","name":"has_attribute?(module, key)"},{"a":"#make_overridable/2","name":"make_overridable(module, tuples)"},{"a":"#open?/1","name":"open?(module)"},{"a":"#overridable?/2","name":"overridable?(module, tuple)"},{"a":"#put_attribute/3","name":"put_attribute(module, key, value)"},{"a":"#register_attribute/3","name":"register_attribute(module, attribute, options)"},{"a":"#safe_concat/1","name":"safe_concat(list)"},{"a":"#safe_concat/2","name":"safe_concat(left, right)"},{"a":"#spec_to_callback/2","name":"spec_to_callback(module, definition)"},{"a":"#split/1","name":"split(module)"}],[],[{"a":"#add/3","name":"add(naive_datetime, amount_to_add, unit \\\\ :second)NaiveDateTime"},{"a":"#compare/2","name":"compare(naive_datetime1, naive_datetime2)NaiveDateTime"},{"a":"#convert/2","name":"convert(naive_datetime, calendar)"},{"a":"#convert!/2","name":"convert!(naive_datetime, calendar)"},{"a":"#diff/3","name":"diff(naive_datetime1, naive_datetime2, unit \\\\ :second)"},{"a":"#from_erl/3","name":"from_erl(tuple, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)NaiveDateTime"},{"a":"#from_erl!/3","name":"from_erl!(tuple, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)NaiveDateTime"},{"a":"#from_gregorian_seconds/3","name":"from_gregorian_seconds(seconds, arg \\\\ {0, 0}, calendar \\\\ Calendar.ISO)NaiveDateTime"},{"a":"#from_iso8601/2","name":"from_iso8601(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#from_iso8601!/2","name":"from_iso8601!(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#local_now/1","name":"local_now(calendar \\\\ Calendar.ISO)"},{"a":"#new/2","name":"new(date, time)"},{"a":"#new/8","name":"new(year, month, day, hour, minute, second, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)"},{"a":"#new!/2","name":"new!(date, time)"},{"a":"#new!/8","name":"new!(year, month, day, hour, minute, second, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)"},{"a":"#to_date/1","name":"to_date(map)NaiveDateTimeDate"},{"a":"#to_erl/1","name":"to_erl(naive_datetime)NaiveDateTime"},{"a":"#to_gregorian_seconds/1","name":"to_gregorian_seconds(map)NaiveDateTime"},{"a":"#to_iso8601/2","name":"to_iso8601(naive_datetime, format \\\\ :extended)ISO 8601:2004"},{"a":"#to_string/1","name":"to_string(naive_datetime)"},{"a":"#to_time/1","name":"to_time(map)NaiveDateTimeTime"},{"a":"#truncate/2","name":"truncate(naive_datetime, precision)"},{"a":"#utc_now/1","name":"utc_now(calendar \\\\ Calendar.ISO)"}],[{"a":"#alive?/0","name":"alive?()"},{"a":"#connect/1","name":"connect(node)"},{"a":"#disconnect/1","name":"disconnect(node)"},{"a":"#get_cookie/0","name":"get_cookie()"},{"a":"#list/0","name":"list()"},{"a":"#list/1","name":"list(args)"},{"a":"#monitor/2","name":"monitor(node, flag)"},{"a":"#monitor/3","name":"monitor(node, flag, options)monitor/2"},{"a":"#ping/1","name":"ping(node)"},{"a":"#self/0","name":"self()"},{"a":"#set_cookie/2","name":"set_cookie(node \\\\ Node.self(), cookie)"},{"a":"#spawn/2","name":"spawn(node, fun)"},{"a":"#spawn/3","name":"spawn(node, fun, opts)"},{"a":"#spawn/4","name":"spawn(node, module, fun, args)"},{"a":"#spawn/5","name":"spawn(node, module, fun, args, opts)"},{"a":"#spawn_link/2","name":"spawn_link(node, fun)"},{"a":"#spawn_link/4","name":"spawn_link(node, module, fun, args)"},{"a":"#start/3","name":"start(name, type \\\\ :longnames, tick_time \\\\ 15000)"},{"a":"#stop/0","name":"stop()"}],[{"a":"#next/2","name":"next(argv, opts \\\\ [])"},{"a":"#parse/2","name":"parse(argv, opts \\\\ [])"},{"a":"#parse!/2","name":"parse!(argv, opts \\\\ [])parse/2OptionParser.ParseError"},{"a":"#parse_head/2","name":"parse_head(argv, opts \\\\ [])parse/2"},{"a":"#parse_head!/2","name":"parse_head!(argv, opts \\\\ [])parse_head/2OptionParser.ParseError"},{"a":"#split/1","name":"split(string)argv/0"},{"a":"#to_argv/2","name":"to_argv(enum, options \\\\ [])argv/0"}],[],[{"a":"#absname/1","name":"absname(path)expand/1"},{"a":"#absname/2","name":"absname(path, relative_to)"},{"a":"#basename/1","name":"basename(path)"},{"a":"#basename/2","name":"basename(path, extension)"},{"a":"#dirname/1","name":"dirname(path)"},{"a":"#expand/1","name":"expand(path)"},{"a":"#expand/2","name":"expand(path, relative_to)"},{"a":"#extname/1","name":"extname(path)"},{"a":"#join/1","name":"join(list)"},{"a":"#join/2","name":"join(left, right)"},{"a":"#relative/1","name":"relative(name)"},{"a":"#relative_to/2","name":"relative_to(path, from)"},{"a":"#relative_to_cwd/1","name":"relative_to_cwd(path)"},{"a":"#rootname/1","name":"rootname(path)"},{"a":"#rootname/2","name":"rootname(path, extension)"},{"a":"#split/1","name":"split(path)"},{"a":"#type/1","name":"type(name)"},{"a":"#wildcard/2","name":"wildcard(glob, opts \\\\ [])"}],[{"a":"#close/1","name":"close(port)"},{"a":"#command/3","name":"command(port, data, options \\\\ [])"},{"a":"#connect/2","name":"connect(port, pid)"},{"a":"#demonitor/2","name":"demonitor(monitor_ref, options \\\\ [])"},{"a":"#info/1","name":"info(port)"},{"a":"#info/2","name":"info(port, spec)"},{"a":"#list/0","name":"list()"},{"a":"#monitor/1","name":"monitor(port)"},{"a":"#open/2","name":"open(name, options)"}],[{"a":"#alive?/1","name":"alive?(pid)"},{"a":"#cancel_timer/2","name":"cancel_timer(timer_ref, options \\\\ [])send_after/3"},{"a":"#delete/1","name":"delete(key)"},{"a":"#demonitor/2","name":"demonitor(monitor_ref, options \\\\ [])"},{"a":"#exit/2","name":"exit(pid, reason)"},{"a":"#flag/2","name":"flag(flag, value)"},{"a":"#flag/3","name":"flag(pid, flag, value)"},{"a":"#get/0","name":"get()"},{"a":"#get/2","name":"get(key, default \\\\ nil)"},{"a":"#get_keys/0","name":"get_keys()"},{"a":"#get_keys/1","name":"get_keys(value)"},{"a":"#group_leader/0","name":"group_leader()"},{"a":"#group_leader/2","name":"group_leader(pid, leader)"},{"a":"#hibernate/3","name":"hibernate(mod, fun_name, args)"},{"a":"#info/1","name":"info(pid)"},{"a":"#info/2","name":"info(pid, spec)"},{"a":"#link/1","name":"link(pid_or_port)"},{"a":"#list/0","name":"list()"},{"a":"#monitor/1","name":"monitor(item)"},{"a":"#put/2","name":"put(key, value)"},{"a":"#read_timer/1","name":"read_timer(timer_ref)send_after/3"},{"a":"#register/2","name":"register(pid_or_port, name)"},{"a":"#registered/0","name":"registered()register/2"},{"a":"#send/3","name":"send(dest, msg, options)"},{"a":"#send_after/4","name":"send_after(dest, msg, time, opts \\\\ [])"},{"a":"#sleep/1","name":"sleep(timeout)"},{"a":"#spawn/2","name":"spawn(fun, opts)"},{"a":"#spawn/4","name":"spawn(mod, fun, args, opts)"},{"a":"#unlink/1","name":"unlink(pid_or_port)"},{"a":"#unregister/1","name":"unregister(name)"},{"a":"#whereis/1","name":"whereis(name)"}],[{"a":"#assert_impl!/2","name":"assert_impl!(protocol, base)"},{"a":"#assert_protocol!/1","name":"assert_protocol!(module)"},{"a":"#consolidate/2","name":"consolidate(protocol, types)"},{"a":"#consolidated?/1","name":"consolidated?(protocol)"},{"a":"#derive/3","name":"derive(protocol, module, options \\\\ [])"},{"a":"#extract_impls/2","name":"extract_impls(protocol, paths)"},{"a":"#extract_protocols/1","name":"extract_protocols(paths)"}],[],[{"a":"#disjoint?/2","name":"disjoint?(range1, range2)"},{"a":"#new/2","name":"new(first, last)"}],[{"a":"#defrecord/3","name":"defrecord(name, tag \\\\ nil, kv)"},{"a":"#defrecordp/3","name":"defrecordp(name, tag \\\\ nil, kv)defrecord/3"},{"a":"#extract/2","name":"extract(name, opts)"},{"a":"#extract_all/1","name":"extract_all(opts)"}],[{"a":"#compile/2","name":"compile(source, options \\\\ \"\")"},{"a":"#compile!/2","name":"compile!(source, options \\\\ \"\")Regex.CompileError"},{"a":"#escape/1","name":"escape(string)"},{"a":"#match?/2","name":"match?(regex, string)"},{"a":"#named_captures/3","name":"named_captures(regex, string, options \\\\ [])"},{"a":"#names/1","name":"names(regex)"},{"a":"#opts/1","name":"opts(regex)"},{"a":"#re_pattern/1","name":"re_pattern(regex)"},{"a":"#recompile/1","name":"recompile(regex)"},{"a":"#recompile!/1","name":"recompile!(regex)Regex.CompileError"},{"a":"#regex?/1","name":"regex?(term)"},{"a":"#replace/4","name":"replace(regex, string, replacement, options \\\\ [])"},{"a":"#run/3","name":"run(regex, string, options \\\\ [])"},{"a":"#scan/3","name":"scan(regex, string, options \\\\ [])run/3"},{"a":"#source/1","name":"source(regex)"},{"a":"#split/3","name":"split(regex, string, options \\\\ [])"},{"a":"#version/0","name":"version()"}],[],[{"a":"#child_spec/1","name":"child_spec(options)"},{"a":"#count/1","name":"count(registry)"},{"a":"#count_match/4","name":"count_match(registry, key, pattern, guards \\\\ [])"},{"a":"#delete_meta/2","name":"delete_meta(registry, key)"},{"a":"#dispatch/4","name":"dispatch(registry, key, mfa_or_fun, opts \\\\ [])"},{"a":"#keys/2","name":"keys(registry, pid)"},{"a":"#lookup/2","name":"lookup(registry, key)"},{"a":"#match/4","name":"match(registry, key, pattern, guards \\\\ [])"},{"a":"#meta/2","name":"meta(registry, key)start_link/1"},{"a":"#put_meta/3","name":"put_meta(registry, key, value)"},{"a":"#register/3","name":"register(registry, key, value)"},{"a":"#select/2","name":"select(registry, spec)"},{"a":"#start_link/1","name":"start_link(options)"},{"a":"#unregister/2","name":"unregister(registry, key)"},{"a":"#unregister_match/4","name":"unregister_match(registry, key, pattern, guards \\\\ [])"},{"a":"#update_value/3","name":"update_value(registry, key, callback)"}],[],[{"a":"#delete/2","name":"delete(set, value)"},{"a":"#difference/2","name":"difference(set1, set2)"},{"a":"#disjoint?/2","name":"disjoint?(set1, set2)"},{"a":"#empty/1","name":"empty(set)"},{"a":"#equal?/2","name":"equal?(set1, set2)"},{"a":"#intersection/2","name":"intersection(set1, set2)"},{"a":"#member?/2","name":"member?(set, value)"},{"a":"#put/2","name":"put(set, value)"},{"a":"#size/1","name":"size(set)"},{"a":"#subset?/2","name":"subset?(set1, set2)"},{"a":"#to_list/1","name":"to_list(set)"},{"a":"#union/2","name":"union(set1, set2)"}],[{"a":"#chunk_by/2","name":"chunk_by(enum, fun)"},{"a":"#chunk_every/2","name":"chunk_every(enum, count)"},{"a":"#chunk_every/4","name":"chunk_every(enum, count, step, leftover \\\\ [])"},{"a":"#chunk_while/4","name":"chunk_while(enum, acc, chunk_fun, after_fun)"},{"a":"#concat/1","name":"concat(enumerables)"},{"a":"#concat/2","name":"concat(first, second)"},{"a":"#cycle/1","name":"cycle(enumerable)"},{"a":"#dedup/1","name":"dedup(enum)"},{"a":"#dedup_by/2","name":"dedup_by(enum, fun)"},{"a":"#drop/2","name":"drop(enum, n)"},{"a":"#drop_every/2","name":"drop_every(enum, nth)"},{"a":"#drop_while/2","name":"drop_while(enum, fun)"},{"a":"#each/2","name":"each(enum, fun)"},{"a":"#filter/2","name":"filter(enum, fun)"},{"a":"#flat_map/2","name":"flat_map(enum, mapper)"},{"a":"#intersperse/2","name":"intersperse(enumerable, intersperse_element)"},{"a":"#interval/1","name":"interval(n)"},{"a":"#into/3","name":"into(enum, collectable, transform \\\\ fn x -> x end)"},{"a":"#iterate/2","name":"iterate(start_value, next_fun)"},{"a":"#map/2","name":"map(enum, fun)"},{"a":"#map_every/3","name":"map_every(enum, nth, fun)"},{"a":"#reject/2","name":"reject(enum, fun)"},{"a":"#repeatedly/1","name":"repeatedly(generator_fun)"},{"a":"#resource/3","name":"resource(start_fun, next_fun, after_fun)"},{"a":"#run/1","name":"run(stream)"},{"a":"#scan/2","name":"scan(enum, fun)"},{"a":"#scan/3","name":"scan(enum, acc, fun)"},{"a":"#take/2","name":"take(enum, count)"},{"a":"#take_every/2","name":"take_every(enum, nth)"},{"a":"#take_while/2","name":"take_while(enum, fun)"},{"a":"#timer/1","name":"timer(n)"},{"a":"#transform/3","name":"transform(enum, acc, reducer)"},{"a":"#transform/4","name":"transform(enum, start_fun, reducer, after_fun)"},{"a":"#unfold/2","name":"unfold(next_acc, next_fun)"},{"a":"#uniq/1","name":"uniq(enum)"},{"a":"#uniq_by/2","name":"uniq_by(enum, fun)"},{"a":"#with_index/2","name":"with_index(enum, offset \\\\ 0)"},{"a":"#zip/1","name":"zip(enumerables)"},{"a":"#zip/2","name":"zip(left, right)"}],[{"a":"#at/2","name":"at(string, position)"},{"a":"#bag_distance/2","name":"bag_distance(string1, string2)"},{"a":"#capitalize/2","name":"capitalize(string, mode \\\\ :default)"},{"a":"#chunk/2","name":"chunk(string, trait)"},{"a":"#codepoints/1","name":"codepoints(string)"},{"a":"#contains?/2","name":"contains?(string, contents)"},{"a":"#downcase/2","name":"downcase(string, mode \\\\ :default)"},{"a":"#duplicate/2","name":"duplicate(subject, n)"},{"a":"#ends_with?/2","name":"ends_with?(string, suffix)"},{"a":"#equivalent?/2","name":"equivalent?(string1, string2)"},{"a":"#first/1","name":"first(string)"},{"a":"#graphemes/1","name":"graphemes(string)"},{"a":"#jaro_distance/2","name":"jaro_distance(string1, string2)"},{"a":"#last/1","name":"last(string)"},{"a":"#length/1","name":"length(string)"},{"a":"#match?/2","name":"match?(string, regex)"},{"a":"#myers_difference/2","name":"myers_difference(string1, string2)"},{"a":"#next_codepoint/1","name":"next_codepoint(string)"},{"a":"#next_grapheme/1","name":"next_grapheme(binary)"},{"a":"#next_grapheme_size/1","name":"next_grapheme_size(string)"},{"a":"#normalize/2","name":"normalize(string, form)"},{"a":"#pad_leading/3","name":"pad_leading(string, count, padding \\\\ [\" \"])"},{"a":"#pad_trailing/3","name":"pad_trailing(string, count, padding \\\\ [\" \"])"},{"a":"#printable?/2","name":"printable?(string, character_limit \\\\ :infinity)"},{"a":"#replace/4","name":"replace(subject, pattern, replacement, options \\\\ [])"},{"a":"#replace_leading/3","name":"replace_leading(string, match, replacement)"},{"a":"#replace_prefix/3","name":"replace_prefix(string, match, replacement)"},{"a":"#replace_suffix/3","name":"replace_suffix(string, match, replacement)"},{"a":"#replace_trailing/3","name":"replace_trailing(string, match, replacement)"},{"a":"#reverse/1","name":"reverse(string)"},{"a":"#slice/2","name":"slice(string, range)"},{"a":"#slice/3","name":"slice(string, start, length)"},{"a":"#split/1","name":"split(binary)"},{"a":"#split/3","name":"split(string, pattern, options \\\\ [])"},{"a":"#split_at/2","name":"split_at(string, position)"},{"a":"#splitter/3","name":"splitter(string, pattern, options \\\\ [])"},{"a":"#starts_with?/2","name":"starts_with?(string, prefix)"},{"a":"#to_atom/1","name":"to_atom(string)"},{"a":"#to_charlist/1","name":"to_charlist(string)"},{"a":"#to_existing_atom/1","name":"to_existing_atom(string)"},{"a":"#to_float/1","name":"to_float(string)"},{"a":"#to_integer/1","name":"to_integer(string)"},{"a":"#to_integer/2","name":"to_integer(string, base)"},{"a":"#trim/1","name":"trim(string)"},{"a":"#trim/2","name":"trim(string, to_trim)"},{"a":"#trim_leading/1","name":"trim_leading(string)"},{"a":"#trim_leading/2","name":"trim_leading(string, to_trim)"},{"a":"#trim_trailing/1","name":"trim_trailing(string)"},{"a":"#trim_trailing/2","name":"trim_trailing(string, to_trim)"},{"a":"#upcase/2","name":"upcase(string, mode \\\\ :default)"},{"a":"#valid?/1","name":"valid?(string)"}],[{"a":"#to_string/1","name":"to_string(term)"}],[{"a":"#child_spec/1","name":"child_spec(init_arg)"},{"a":"#close/1","name":"close(pid)"},{"a":"#contents/1","name":"contents(pid)"},{"a":"#flush/1","name":"flush(pid)"},{"a":"#open/2","name":"open(string, options_or_function \\\\ [])"},{"a":"#open/3","name":"open(string, options, function)"}],[{"a":"#child_spec/2","name":"child_spec(module_or_map, overrides)"},{"a":"#count_children/1","name":"count_children(supervisor)"},{"a":"#delete_child/2","name":"delete_child(supervisor, child_id)"},{"a":"#init/2","name":"init(children, options)"},{"a":"#restart_child/2","name":"restart_child(supervisor, child_id)"},{"a":"#start_child/2","name":"start_child(supervisor, child_spec)"},{"a":"#start_link/2","name":"start_link(children, options)"},{"a":"#start_link/3","name":"start_link(module, init_arg, options \\\\ [])"},{"a":"#stop/3","name":"stop(supervisor, reason \\\\ :normal, timeout \\\\ :infinity)"},{"a":"#terminate_child/2","name":"terminate_child(supervisor, child_id)"},{"a":"#which_children/1","name":"which_children(supervisor)"}],[{"a":"#supervise/2","name":"supervise(children, options)"},{"a":"#supervisor/3","name":"supervisor(module, args, options \\\\ [])"},{"a":"#worker/3","name":"worker(module, args, options \\\\ [])"}],[],[{"a":"#argv/0","name":"argv()"},{"a":"#argv/1","name":"argv(args)"},{"a":"#at_exit/1","name":"at_exit(fun)"},{"a":"#build_info/0","name":"build_info()"},{"a":"#cmd/3","name":"cmd(command, args, opts \\\\ [])"},{"a":"#compiled_endianness/0","name":"compiled_endianness()"},{"a":"#convert_time_unit/3","name":"convert_time_unit(time, from_unit, to_unit)"},{"a":"#cwd/0","name":"cwd()"},{"a":"#cwd!/0","name":"cwd!()"},{"a":"#delete_env/1","name":"delete_env(varname)"},{"a":"#endianness/0","name":"endianness()"},{"a":"#fetch_env/1","name":"fetch_env(varname)"},{"a":"#fetch_env!/1","name":"fetch_env!(varname)"},{"a":"#find_executable/1","name":"find_executable(program)"},{"a":"#get_env/0","name":"get_env()"},{"a":"#get_env/2","name":"get_env(varname, default \\\\ nil)"},{"a":"#get_pid/0","name":"get_pid()"},{"a":"#halt/1","name":"halt(status \\\\ 0)"},{"a":"#monotonic_time/0","name":"monotonic_time()"},{"a":"#monotonic_time/1","name":"monotonic_time(unit)"},{"a":"#no_halt/0","name":"no_halt()"},{"a":"#no_halt/1","name":"no_halt(boolean)"},{"a":"#os_time/0","name":"os_time()"},{"a":"#os_time/1","name":"os_time(unit)"},{"a":"#otp_release/0","name":"otp_release()"},{"a":"#pid/0","name":"pid()"},{"a":"#put_env/1","name":"put_env(enum)"},{"a":"#put_env/2","name":"put_env(varname, value)"},{"a":"#restart/0","name":"restart()"},{"a":"#schedulers/0","name":"schedulers()"},{"a":"#schedulers_online/0","name":"schedulers_online()"},{"a":"#stacktrace/0","name":"stacktrace()"},{"a":"#stop/1","name":"stop(status \\\\ 0)"},{"a":"#system_time/0","name":"system_time()"},{"a":"#system_time/1","name":"system_time(unit)"},{"a":"#time_offset/0","name":"time_offset()"},{"a":"#time_offset/1","name":"time_offset(unit)"},{"a":"#tmp_dir/0","name":"tmp_dir()"},{"a":"#tmp_dir!/0","name":"tmp_dir!()"},{"a":"#unique_integer/1","name":"unique_integer(modifiers \\\\ [])"},{"a":"#user_home/0","name":"user_home()"},{"a":"#user_home!/0","name":"user_home!()"},{"a":"#version/0","name":"version()"}],[],[{"a":"#__struct__/0","name":"%Task{}"},{"a":"#async/1","name":"async(fun)"},{"a":"#async/3","name":"async(module, function_name, args)"},{"a":"#async_stream/3","name":"async_stream(enumerable, fun, options \\\\ [])"},{"a":"#async_stream/5","name":"async_stream(enumerable, module, function_name, args, options \\\\ [])"},{"a":"#await/2","name":"await(task, timeout \\\\ 5000)"},{"a":"#await_many/2","name":"await_many(tasks, timeout \\\\ 5000)"},{"a":"#child_spec/1","name":"child_spec(arg)"},{"a":"#shutdown/2","name":"shutdown(task, shutdown \\\\ 5000)"},{"a":"#start/1","name":"start(fun)"},{"a":"#start/3","name":"start(module, function_name, args)"},{"a":"#start_link/1","name":"start_link(fun)"},{"a":"#start_link/3","name":"start_link(module, function_name, args)"},{"a":"#yield/2","name":"yield(task, timeout \\\\ 5000)"},{"a":"#yield_many/2","name":"yield_many(tasks, timeout \\\\ 5000)"}],[{"a":"#async/3","name":"async(supervisor, fun, options \\\\ [])"},{"a":"#async/5","name":"async(supervisor, module, fun, args, options \\\\ [])"},{"a":"#async_nolink/3","name":"async_nolink(supervisor, fun, options \\\\ [])"},{"a":"#async_nolink/5","name":"async_nolink(supervisor, module, fun, args, options \\\\ [])"},{"a":"#async_stream/4","name":"async_stream(supervisor, enumerable, fun, options \\\\ [])"},{"a":"#async_stream/6","name":"async_stream(supervisor, enumerable, module, function, args, options \\\\ [])"},{"a":"#async_stream_nolink/4","name":"async_stream_nolink(supervisor, enumerable, fun, options \\\\ [])"},{"a":"#async_stream_nolink/6","name":"async_stream_nolink(supervisor, enumerable, module, function, args, options \\\\ [])"},{"a":"#children/1","name":"children(supervisor)"},{"a":"#start_child/3","name":"start_child(supervisor, fun, options \\\\ [])"},{"a":"#start_child/5","name":"start_child(supervisor, module, fun, args, options \\\\ [])"},{"a":"#start_link/1","name":"start_link(options \\\\ [])"},{"a":"#terminate_child/2","name":"terminate_child(supervisor, pid)"}],[{"a":"#add/3","name":"add(time, number, unit \\\\ :second)"},{"a":"#compare/2","name":"compare(time1, time2)"},{"a":"#convert/2","name":"convert(time, calendar)"},{"a":"#convert!/2","name":"convert!(time, calendar)Time.convert/2ArgumentError"},{"a":"#diff/3","name":"diff(time1, time2, unit \\\\ :second)"},{"a":"#from_erl/3","name":"from_erl(tuple, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)Time"},{"a":"#from_erl!/3","name":"from_erl!(tuple, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)Time"},{"a":"#from_iso8601/2","name":"from_iso8601(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#from_iso8601!/2","name":"from_iso8601!(string, calendar \\\\ Calendar.ISO)ISO 8601:2004"},{"a":"#from_seconds_after_midnight/3","name":"from_seconds_after_midnight(seconds, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)Time"},{"a":"#new/5","name":"new(hour, minute, second, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)"},{"a":"#new!/5","name":"new!(hour, minute, second, microsecond \\\\ {0, 0}, calendar \\\\ Calendar.ISO)"},{"a":"#to_erl/1","name":"to_erl(time)"},{"a":"#to_iso8601/2","name":"to_iso8601(time, format \\\\ :extended)ISO 8601:2004"},{"a":"#to_seconds_after_midnight/1","name":"to_seconds_after_midnight(time)Time"},{"a":"#to_string/1","name":"to_string(time)"},{"a":"#truncate/2","name":"truncate(time, precision)"},{"a":"#utc_now/1","name":"utc_now(calendar \\\\ Calendar.ISO)"}],[],[],[{"a":"#append/2","name":"append(tuple, value)"},{"a":"#delete_at/2","name":"delete_at(tuple, index)"},{"a":"#duplicate/2","name":"duplicate(data, size)"},{"a":"#insert_at/3","name":"insert_at(tuple, index, value)"},{"a":"#to_list/1","name":"to_list(tuple)"}],[{"a":"#char_reserved?/1","name":"char_reserved?(character)"},{"a":"#char_unescaped?/1","name":"char_unescaped?(character)"},{"a":"#char_unreserved?/1","name":"char_unreserved?(character)"},{"a":"#decode/1","name":"decode(uri)"},{"a":"#decode_query/2","name":"decode_query(query, map \\\\ %{})"},{"a":"#decode_www_form/1","name":"decode_www_form(string)"},{"a":"#default_port/1","name":"default_port(scheme)"},{"a":"#default_port/2","name":"default_port(scheme, port)"},{"a":"#encode/2","name":"encode(string, predicate \\\\ &char_unescaped?/1)"},{"a":"#encode_query/1","name":"encode_query(enumerable)"},{"a":"#encode_www_form/1","name":"encode_www_form(string)"},{"a":"#merge/2","name":"merge(uri, rel)"},{"a":"#parse/1","name":"parse(uri)"},{"a":"#query_decoder/1","name":"query_decoder(query)"},{"a":"#to_string/1","name":"to_string(uri)URI struct"}],[],[],[{"a":"#compare/2","name":"compare(version1, version2)"},{"a":"#compile_requirement/1","name":"compile_requirement(requirement)"},{"a":"#match?/3","name":"match?(version, requirement, opts \\\\ [])"},{"a":"#parse/1","name":"parse(string)Version"},{"a":"#parse!/1","name":"parse!(string)Version"},{"a":"#parse_requirement/1","name":"parse_requirement(string)Version.Requirement"},{"a":"#parse_requirement!/1","name":"parse_requirement!(string)Version.Requirement"}],[],[],[],[]]